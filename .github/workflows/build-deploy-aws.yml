name: CI/CD to AWS
on:
  # pull_request:
  #   types: [opened]
  push:
    branches:
      # - main
      - dev
  release:
    types: [published]
    tags:
      - 'v*'

  # allows to manually run the workflow in actions tab
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build_and_push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    outputs:
      img_tag: ${{steps.meta.outputs.tags}}
      json_tag: ${{steps.meta.outputs.json}}      
    environment: aws
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false # if one matrix fails, continue with the rest
      matrix:
        include:
          - dockerfile: ./apps/ronb-node/root.Dockerfile
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          - dockerfile: ./apps/newscache/newscache.Dockerfile
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-newscache
        
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ matrix.image }}
          tags: |
            type=semver,pattern={{version}}
            # minimal (short sha)
            type=sha
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: production
          push: true
          # push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # deploy:
  #   name: Deploy to Amazon EC2 instance
  #   runs-on: ubuntu-latest
  #   environment: aws
  #   needs: build_and_push

  #   steps:
  #     - name: Deploy to aws EC2 instance via SSH action
  #       uses: appleboy/ssh-action@v0.1.3
  #       env:
  #           TAG: ${{fromJSON(needs.build_and_push.outputs.json_tag).tags[0]}}
  #           # TAG: ${{needs.build_and_push.outputs.img_tag}}
  #           #${{ github.sha }}_${{ github.event.inputs.version }}
  #       with:
  #         host: ${{ secrets.SSH_HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         key: ${{ secrets.SSH_KEY }}
  #         envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA,TAG
  #         script: |
  #           cd ronb-platform
  #           echo $TAG
  #           export NEST_TAG=$(echo $TAG)
  #           echo NEST_IMAGE=$NEST_TAG > .env.nestimg
  #           cat .env.django .env.nestimg .env.dashboard > .env
  #           docker compose up -d api-nest
